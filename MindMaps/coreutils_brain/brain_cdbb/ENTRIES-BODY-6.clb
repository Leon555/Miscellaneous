<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content="EditLive! 9.0.0.115" />
<meta name="generator" content="TheBrain 8.0.0.7" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<style type="text/css">
<!--
body {
font-family: Helvetica;  font-size: small;  background: #ffffff;  color: #000000;
}
p {
margin-top: 0pt;  margin-bottom: 0pt;
}
-->
</style>
</head>
<body>
<p>struct _getopt_data</p>
<p>{</p>
<p> /* These have exactly the same meaning as the corresponding global</p>
<p>    variables, except that they are used for the reentrant</p>
<p>    versions of getopt.  */</p>
<p> int optind;</p>
<p> int opterr;</p>
<p> int optopt;</p>
<p> char *optarg;</p>
<p> </p>
<p> /* Internal members.  */</p>
<p> </p>
<p> /* True if the internal members have been initialized.  */</p>
<p> int __initialized;</p>
<p> </p>
<p> /* The next char to be scanned in the option-element</p>
<p>    in which the last option character we returned was found.</p>
<p>    This allows us to pick up the scan where we left off.</p>
<p> </p>
<p>    If this is zero, or a null string, it means resume the scan</p>
<p>    by advancing to the next ARGV-element.  */</p>
<p> char *__nextchar;</p>
<p> </p>
<p> /* Describe how to deal with options that follow non-option ARGV-elements.</p>
<p> </p>
<p>    If the caller did not specify anything,</p>
<p>    the default is REQUIRE_ORDER if the environment variable</p>
<p>    POSIXLY_CORRECT is defined, PERMUTE otherwise.</p>
<p> </p>
<p>    REQUIRE_ORDER means don't recognize them as options;</p>
<p>    stop option processing when the first non-option is seen.</p>
<p>    This is what Unix does.</p>
<p>    This mode of operation is selected by either setting the environment</p>
<p>    variable POSIXLY_CORRECT, or using `+' as the first character</p>
<p>    of the list of option characters, or by calling getopt.</p>
<p> </p>
<p>    PERMUTE is the default.  We permute the contents of ARGV as we</p>
<p>    scan, so that eventually all the non-options are at the end.</p>
<p>    This allows options to be given in any order, even with programs</p>
<p>    that were not written to expect this.</p>
<p> </p>
<p>    RETURN_IN_ORDER is an option available to programs that were</p>
<p>    written to expect options and other ARGV-elements in any order</p>
<p>    and that care about the ordering of the two.  We describe each</p>
<p>    non-option ARGV-element as if it were the argument of an option</p>
<p>    with character code 1.  Using `-' as the first character of the</p>
<p>    list of option characters selects this mode of operation.</p>
<p> </p>
<p>    The special argument `--' forces an end of option-scanning regardless</p>
<p>    of the value of `ordering'.  In the case of RETURN_IN_ORDER, only</p>
<p>    `--' can cause `getopt' to return -1 with `optind' != ARGC.  */</p>
<p> </p>
<p> enum</p>
<p>   {</p>
<p>     REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER</p>
<p>   } __ordering;</p>
<p> </p>
<p> /* If the POSIXLY_CORRECT environment variable is set</p>
<p>    or getopt was called.  */</p>
<p> int __posixly_correct;</p>
<p> </p>
<p> </p>
<p> /* Handle permutation of arguments.  */</p>
<p> </p>
<p> /* Describe the part of ARGV that contains non-options that have</p>
<p>    been skipped.  `first_nonopt' is the index in ARGV of the first</p>
<p>    of them; `last_nonopt' is the index after the last of them.  */</p>
<p> </p>
<p> int __first_nonopt;</p>
<p> int __last_nonopt;</p>
<p> </p>
<p>#if defined _LIBC && defined USE_NONOPTION_FLAGS</p>
<p> int __nonoption_flags_max_len;</p>
<p> int __nonoption_flags_len;</p>
<p># endif</p>
<p>};</p>
</body>
</html>
